{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "03de77a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-05T09:30:40.206803Z",
     "iopub.status.busy": "2024-08-05T09:30:40.206053Z",
     "iopub.status.idle": "2024-08-05T09:31:21.616246Z",
     "shell.execute_reply": "2024-08-05T09:31:21.615141Z"
    },
    "papermill": {
     "duration": 41.420302,
     "end_time": "2024-08-05T09:31:21.618742",
     "exception": false,
     "start_time": "2024-08-05T09:30:40.198440",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting chardet\r\n",
      "  Downloading chardet-5.2.0-py3-none-any.whl.metadata (3.4 kB)\r\n",
      "Downloading chardet-5.2.0-py3-none-any.whl (199 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m199.4/199.4 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: chardet\r\n",
      "Successfully installed chardet-5.2.0\r\n",
      "Requirement already satisfied: nltk in /opt/conda/lib/python3.10/site-packages (3.2.4)\r\n",
      "Requirement already satisfied: six in /opt/conda/lib/python3.10/site-packages (from nltk) (1.16.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install chardet\n",
    "!pip install seqeval -q\n",
    "!pip install nltk"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f670374b",
   "metadata": {
    "papermill": {
     "duration": 0.006016,
     "end_time": "2024-08-05T09:31:21.631571",
     "exception": false,
     "start_time": "2024-08-05T09:31:21.625555",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import the libraries / Modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ba718526",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-05T09:31:21.645391Z",
     "iopub.status.busy": "2024-08-05T09:31:21.645080Z",
     "iopub.status.idle": "2024-08-05T09:31:39.860768Z",
     "shell.execute_reply": "2024-08-05T09:31:39.860039Z"
    },
    "papermill": {
     "duration": 18.225432,
     "end_time": "2024-08-05T09:31:39.863175",
     "exception": false,
     "start_time": "2024-08-05T09:31:21.637743",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-05 09:31:29.943867: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-08-05 09:31:29.943989: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-08-05 09:31:30.066658: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tqdm.notebook import tqdm\n",
    "import gc\n",
    "import json\n",
    "import os\n",
    "import random\n",
    "import re\n",
    "import warnings\n",
    "from collections import defaultdict\n",
    "from functools import partial\n",
    "from typing import Dict\n",
    "\n",
    "from sklearn.metrics import classification_report\n",
    "from seqeval.metrics import f1_score, precision_score, recall_score\n",
    "#from transformers import BertTokenizer, BertForSequenceClassification, AdamW, AutoTokenizer\n",
    "from transformers import (\n",
    "    BertTokenizer,\n",
    "    BertForSequenceClassification,\n",
    "    AdamW,\n",
    "    AutoModelForTokenClassification,\n",
    "    AutoTokenizer,\n",
    "    DataCollatorForTokenClassification,\n",
    "    Trainer,\n",
    "    TrainingArguments\n",
    ")\n",
    "import torch\n",
    "from datasets import Dataset as HF_dataset\n",
    "#from torch.utils.data import DataLoader, Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6047601",
   "metadata": {
    "papermill": {
     "duration": 0.006329,
     "end_time": "2024-08-05T09:31:39.876097",
     "exception": false,
     "start_time": "2024-08-05T09:31:39.869768",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Set CFG and Seed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3b42deb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-05T09:31:39.889757Z",
     "iopub.status.busy": "2024-08-05T09:31:39.889221Z",
     "iopub.status.idle": "2024-08-05T09:31:39.895283Z",
     "shell.execute_reply": "2024-08-05T09:31:39.894194Z"
    },
    "papermill": {
     "duration": 0.015098,
     "end_time": "2024-08-05T09:31:39.897243",
     "exception": false,
     "start_time": "2024-08-05T09:31:39.882145",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0: 'O', 1: 'Task', 2: 'Dataset', 3: 'Metric', 4: 'Score'}\n"
     ]
    }
   ],
   "source": [
    "all_labels = [\n",
    "    \"O\",\n",
    "    'Task',\n",
    "    'Dataset',\n",
    "    'Metric',\n",
    "    'Score',\n",
    "]\n",
    "label2id = {l: i for i, l in enumerate(all_labels)}\n",
    "id2label = {v: k for k, v in label2id.items()}\n",
    "\n",
    "print(id2label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e2f3f338",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-05T09:31:39.910620Z",
     "iopub.status.busy": "2024-08-05T09:31:39.910350Z",
     "iopub.status.idle": "2024-08-05T09:31:40.005317Z",
     "shell.execute_reply": "2024-08-05T09:31:40.004547Z"
    },
    "papermill": {
     "duration": 0.103963,
     "end_time": "2024-08-05T09:31:40.007312",
     "exception": false,
     "start_time": "2024-08-05T09:31:39.903349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Config:\n",
    "    # debug\n",
    "    debug = False\n",
    "    is_use_daniia_dataset = False\n",
    "\n",
    "    # cross validation\n",
    "    do_cv = True\n",
    "    fold = 0\n",
    "    n_splits = 2 if debug else 4\n",
    "\n",
    "    # gpu\n",
    "    gpu = torch.cuda.is_available()\n",
    "\n",
    "    # seed\n",
    "    seed = 42\n",
    "\n",
    "    # negative sample frac\n",
    "    neg_frac = 0 #0.3\n",
    "\n",
    "    # external dataset\n",
    "#     external_name = \"tonyarobertson\"\n",
    "    external_name = \"Last_epoch\" # \n",
    "#     external_name = \"mpware\"\n",
    "#     external_name = \"valentin\"\n",
    "#     external_name = \"moth\"\n",
    "#     external_name = \"pjmathematician\"\n",
    "    \n",
    "    #TODO adjust folders\n",
    "    # directory path\n",
    "    input_dir = \"/kaggle/working\"\n",
    "    comp_dir = input_dir + \"comp_dir\"\n",
    "    fold_dir = input_dir + \"sota/dataset/train/\"\n",
    "    external_dir = input_dir + \"external_dir\"\n",
    "    output_dir = \"/kaggle/working/output/\"\n",
    "\n",
    "    # file path\n",
    "    comp_path = comp_dir + \"train.json\"\n",
    "    external_path = external_dir + \"datamix.json\"\n",
    "\n",
    "    # tokenizer\n",
    "    train_max_length = 512 #1536\n",
    "    eval_max_length = 512 #3500\n",
    "    train_stride = None\n",
    "    eval_stride = 256\n",
    "\n",
    "    # model\n",
    "    # model_name = \"/kaggle/input/ready-dataset-negfrac0-0-lr3e-5/scibert_scivocab_uncased-Last_epoch-512-42-0\" #ALSO cased scibert\n",
    "    model_name = '/kaggle/input/ready-dataset-negfrac0-0-lr3e-5/output/checkpoint-12900'\n",
    "#     model_name = \"microsoft/deberta-v3-base\"\n",
    "#     model_name = \"microsoft/deberta-v3-large\"\n",
    "    num_train_epochs = 1 if debug else 3\n",
    "    max_steps = 5 if debug else 3000\n",
    "    fp16 = True if gpu else False\n",
    "    per_device_train_batch_size = 16\n",
    "    gradient_accumulation_steps = 1 \n",
    "    learning_rate = 3e-5\n",
    "    warmup_ratio = 0.1\n",
    "    weight_decay = 0.01\n",
    "\n",
    "    # postprocessing\n",
    "    threshold = 0.95\n",
    "\n",
    "    # save path\n",
    "    if train_stride is not None:\n",
    "        save_path = f\"{model_name.split('/')[-1]}-{external_name}-{train_max_length}-{train_stride}-{seed}\"\n",
    "    else:\n",
    "        save_path = f\"{model_name.split('/')[-1]}-{external_name}-{train_max_length}-{seed}\"\n",
    "    if do_cv:\n",
    "        save_path = f\"{save_path}-{fold}\"\n",
    "\n",
    "def fix_seed(seed):\n",
    "    # basic\n",
    "    random.seed(seed)\n",
    "    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n",
    "    np.random.seed(seed)\n",
    "\n",
    "    # torch\n",
    "    torch.manual_seed(seed)\n",
    "    torch.cuda.manual_seed(seed)\n",
    "    torch.backends.cudnn.deterministic = True\n",
    "    torch.backends.cudnn.benchmark = False\n",
    "\n",
    "fix_seed(Config.seed)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b32db24d",
   "metadata": {
    "papermill": {
     "duration": 0.006003,
     "end_time": "2024-08-05T09:31:40.019895",
     "exception": false,
     "start_time": "2024-08-05T09:31:40.013892",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# load data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "15dab41f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-05T09:31:40.033507Z",
     "iopub.status.busy": "2024-08-05T09:31:40.033229Z",
     "iopub.status.idle": "2024-08-05T09:31:40.038236Z",
     "shell.execute_reply": "2024-08-05T09:31:40.037405Z"
    },
    "papermill": {
     "duration": 0.014218,
     "end_time": "2024-08-05T09:31:40.040282",
     "exception": false,
     "start_time": "2024-08-05T09:31:40.026064",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# convert new str to new list\n",
    "from ast import literal_eval\n",
    "def convert_str_to_list(row,term):\n",
    "    #if len(set(row[\"labels\"]))>1:\n",
    "    #    return True\n",
    "    #else:\n",
    "    #    return False\n",
    "    return literal_eval(row[term])\n",
    "    #return word_labels\n",
    "if not Config.is_use_daniia_dataset:\n",
    "    pass\n",
    "\n",
    "#    train_df_new['input_ids'] = train_df_new.apply(lambda row: convert_str_to_list(row,'input_ids'), axis=1)\n",
    "#    train_df_new['labels'] = train_df_new.apply(lambda row: convert_str_to_list(row,'labels'), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9811eb30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-05T09:31:40.054026Z",
     "iopub.status.busy": "2024-08-05T09:31:40.053739Z",
     "iopub.status.idle": "2024-08-05T09:31:44.921040Z",
     "shell.execute_reply": "2024-08-05T09:31:44.920262Z"
    },
    "papermill": {
     "duration": 4.876657,
     "end_time": "2024-08-05T09:31:44.923407",
     "exception": false,
     "start_time": "2024-08-05T09:31:40.046750",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "if Config.is_use_daniia_dataset:\n",
    "    val_df = pd.read_pickle('/kaggle/input/sota-preprocessed-v3/val_preprocessed_v2')[['input_ids','labels']]#[['word_labels','input_ids','token_type_ids','attention_mask','offset_mapping','labels']]\n",
    "else:\n",
    "    val_df = pd.read_csv('../input/sota-all-ready/output_val_ready.csv')[['input_ids','labels']]\n",
    "    val_df['input_ids'] = val_df.apply(lambda row: convert_str_to_list(row,'input_ids'), axis=1)\n",
    "    val_df['labels'] = val_df.apply(lambda row: convert_str_to_list(row,'labels'), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9ffdd991",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-05T09:31:44.938169Z",
     "iopub.status.busy": "2024-08-05T09:31:44.937821Z",
     "iopub.status.idle": "2024-08-05T09:31:44.943823Z",
     "shell.execute_reply": "2024-08-05T09:31:44.942972Z"
    },
    "papermill": {
     "duration": 0.015716,
     "end_time": "2024-08-05T09:31:44.945783",
     "exception": false,
     "start_time": "2024-08-05T09:31:44.930067",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# change label to O-0 task-1 dataset-2 metric-3 score-4, when use ready dataset no need\n",
    "if Config.is_use_daniia_dataset:\n",
    "    def change_label(row):\n",
    "        #print(row[\"labels\"],type(row[\"labels\"]))\n",
    "\n",
    "        #if len(set(row[\"labels\"]))>1:\n",
    "        #    return True\n",
    "        #else:\n",
    "        #    return False\n",
    "        #return word_labels\n",
    "        new_labels_list = [ii+1 for ii in row[\"labels\"]]\n",
    "        new_labels_list = [ii if ii!=5 else 0 for ii in new_labels_list]\n",
    "        #print(new_labels_list)\n",
    "        #raise ValueError()\n",
    "        return new_labels_list\n",
    "    #train_df_new['labels'] = train_df_new.apply(lambda row: change_label(row), axis=1)\n",
    "    val_df['labels'] = val_df.apply(lambda row: change_label(row), axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04b36584",
   "metadata": {
    "papermill": {
     "duration": 0.006924,
     "end_time": "2024-08-05T09:31:44.959067",
     "exception": false,
     "start_time": "2024-08-05T09:31:44.952143",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "569c86a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-05T09:31:44.972729Z",
     "iopub.status.busy": "2024-08-05T09:31:44.972430Z",
     "iopub.status.idle": "2024-08-05T09:31:45.102153Z",
     "shell.execute_reply": "2024-08-05T09:31:45.101220Z"
    },
    "papermill": {
     "duration": 0.138846,
     "end_time": "2024-08-05T09:31:45.104195",
     "exception": false,
     "start_time": "2024-08-05T09:31:44.965349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1494: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "tokenizer = AutoTokenizer.from_pretrained(Config.model_name)\n",
    "data_collator = DataCollatorForTokenClassification(tokenizer, pad_to_multiple_of=16)\n",
    "args = TrainingArguments(\n",
    "    output_dir=Config.output_dir, \n",
    "    fp16=Config.fp16,\n",
    "    per_device_train_batch_size=Config.per_device_train_batch_size,\n",
    "    gradient_accumulation_steps=Config.gradient_accumulation_steps,\n",
    "    num_train_epochs=Config.num_train_epochs,\n",
    "#     max_steps=Config.max_steps,\n",
    "    learning_rate=0, #Config.learning_rate,\n",
    "    warmup_ratio=Config.warmup_ratio,\n",
    "    weight_decay=0, #Config.weight_decay,\n",
    "#     group_by_length=True,\n",
    "    #evaluation_strategy=\"no\",\n",
    "    evaluation_strategy='steps',\n",
    "    save_strategy='steps',\n",
    "    eval_steps=5 if Config.debug else 2,\n",
    "    save_steps=5 if Config.debug else 100,\n",
    "    logging_steps=0.05,\n",
    "    #save_strategy=\"no\",\n",
    "    save_total_limit=5,\n",
    "    lr_scheduler_type=\"cosine\",\n",
    "    metric_for_best_model=\"f1yue\",\n",
    "    load_best_model_at_end=True,\n",
    "    report_to=\"none\",\n",
    "    seed=Config.seed,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2fdf4b21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-05T09:31:45.118362Z",
     "iopub.status.busy": "2024-08-05T09:31:45.118039Z",
     "iopub.status.idle": "2024-08-05T09:31:45.128770Z",
     "shell.execute_reply": "2024-08-05T09:31:45.128047Z"
    },
    "papermill": {
     "duration": 0.019982,
     "end_time": "2024-08-05T09:31:45.130642",
     "exception": false,
     "start_time": "2024-08-05T09:31:45.110660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def freeze(module):\n",
    "    for parameter in module.parameters():\n",
    "        parameter.requires_grad = False\n",
    "\n",
    "\n",
    "def compute_metrics(res, all_labels):\n",
    "    predictions, labels = res\n",
    "    predictions = np.argmax(predictions, axis=2)\n",
    "\n",
    "    # Remove ignored index (special tokens)\n",
    "    true_predictions = [\n",
    "        [all_labels[p] for (p, l) in zip(prediction, label) if l != -100]\n",
    "        for prediction, label in zip(predictions, labels)\n",
    "    ]\n",
    "    true_labels = [\n",
    "        [all_labels[l] for (p, l) in zip(prediction, label) if l != -100]\n",
    "        for prediction, label in zip(predictions, labels)\n",
    "    ]\n",
    "\n",
    "    recall = recall_score(true_labels, true_predictions)\n",
    "    precision = precision_score(true_labels, true_predictions)\n",
    "    f1_score = (1 + 1) * recall * precision / (1 * precision + recall)\n",
    "\n",
    "    return {\"recall\": recall, \"precision\": precision, \"f1yue\": f1_score}\n",
    "\n",
    "\n",
    "def train(model_name, all_labels, id2label, label2id, ds, eval_ds, args, data_collator, tokenizer, save_path):\n",
    "    model = AutoModelForTokenClassification.from_pretrained(\n",
    "        model_name,\n",
    "        num_labels=len(all_labels),\n",
    "        id2label=id2label,\n",
    "        label2id=label2id,\n",
    "        ignore_mismatched_sizes=True,\n",
    "    )\n",
    "\n",
    "    trainer = Trainer(\n",
    "        model=model, \n",
    "        args=args, \n",
    "        train_dataset=ds,\n",
    "        eval_dataset=eval_ds,\n",
    "        data_collator=data_collator,\n",
    "        tokenizer=tokenizer,\n",
    "        compute_metrics=partial(compute_metrics, all_labels=all_labels)\n",
    "    )\n",
    "    \n",
    "    torch.cuda.empty_cache()\n",
    "    _ = gc.collect()\n",
    "    return model, trainer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a364e024",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-05T09:31:45.145114Z",
     "iopub.status.busy": "2024-08-05T09:31:45.144418Z",
     "iopub.status.idle": "2024-08-05T09:31:51.080832Z",
     "shell.execute_reply": "2024-08-05T09:31:51.080062Z"
    },
    "papermill": {
     "duration": 5.945888,
     "end_time": "2024-08-05T09:31:51.083092",
     "exception": false,
     "start_time": "2024-08-05T09:31:45.137204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "ds = HF_dataset.from_pandas(val_df, preserve_index=False)\n",
    "ds_val = HF_dataset.from_pandas(val_df, preserve_index=False)\n",
    "\n",
    "model, trainer = train(\n",
    "    Config.model_name,\n",
    "    all_labels,\n",
    "    id2label,\n",
    "    label2id,\n",
    "    ds,\n",
    "    ds_val,\n",
    "    args,\n",
    "    data_collator,\n",
    "    tokenizer,\n",
    "    Config.save_path,\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3e46204e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-05T09:31:51.097376Z",
     "iopub.status.busy": "2024-08-05T09:31:51.097098Z",
     "iopub.status.idle": "2024-08-05T09:33:06.991306Z",
     "shell.execute_reply": "2024-08-05T09:33:06.990388Z"
    },
    "papermill": {
     "duration": 75.904032,
     "end_time": "2024-08-05T09:33:06.993730",
     "exception": false,
     "start_time": "2024-08-05T09:31:51.089698",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_df = pd.read_csv('../input/sota-all-ready/output_test_ready.csv')[['input_ids','labels']]\n",
    "test_df['input_ids'] = test_df.apply(lambda row: convert_str_to_list(row,'input_ids'), axis=1)\n",
    "test_df['labels'] = test_df.apply(lambda row: convert_str_to_list(row,'labels'), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7167ca2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-05T09:33:07.007824Z",
     "iopub.status.busy": "2024-08-05T09:33:07.007553Z",
     "iopub.status.idle": "2024-08-05T09:33:12.003896Z",
     "shell.execute_reply": "2024-08-05T09:33:12.002880Z"
    },
    "papermill": {
     "duration": 5.006016,
     "end_time": "2024-08-05T09:33:12.006406",
     "exception": false,
     "start_time": "2024-08-05T09:33:07.000390",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "ds_test = HF_dataset.from_pandas(test_df, preserve_index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d10c9e07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-05T09:33:12.021259Z",
     "iopub.status.busy": "2024-08-05T09:33:12.020952Z",
     "iopub.status.idle": "2024-08-05T09:46:22.174342Z",
     "shell.execute_reply": "2024-08-05T09:46:22.173341Z"
    },
    "papermill": {
     "duration": 790.169322,
     "end_time": "2024-08-05T09:46:22.182677",
     "exception": false,
     "start_time": "2024-08-05T09:33:12.013355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n",
      "  warnings.warn('Was asked to gather along dimension 0, but all '\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      \n",
       "      <progress value='2166' max='2166' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      [2166/2166 10:25]\n",
       "    </div>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seqeval/metrics/sequence_labeling.py:171: UserWarning: Score seems not to be NE tag.\n",
      "  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n",
      "/opt/conda/lib/python3.10/site-packages/seqeval/metrics/sequence_labeling.py:171: UserWarning: Metric seems not to be NE tag.\n",
      "  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n",
      "/opt/conda/lib/python3.10/site-packages/seqeval/metrics/sequence_labeling.py:171: UserWarning: Dataset seems not to be NE tag.\n",
      "  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n",
      "/opt/conda/lib/python3.10/site-packages/seqeval/metrics/sequence_labeling.py:171: UserWarning: Task seems not to be NE tag.\n",
      "  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'eval_loss': 0.02577989548444748,\n",
       " 'eval_recall': 0.23041637856889893,\n",
       " 'eval_precision': 0.3333414657948668,\n",
       " 'eval_f1yue': 0.27248342224659716,\n",
       " 'eval_runtime': 790.1158,\n",
       " 'eval_samples_per_second': 43.851,\n",
       " 'eval_steps_per_second': 2.741}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainer.evaluate(ds_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1d03dd44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-05T09:46:22.197593Z",
     "iopub.status.busy": "2024-08-05T09:46:22.197291Z",
     "iopub.status.idle": "2024-08-05T09:46:23.253182Z",
     "shell.execute_reply": "2024-08-05T09:46:23.251848Z"
    },
    "papermill": {
     "duration": 1.066286,
     "end_time": "2024-08-05T09:46:23.255781",
     "exception": false,
     "start_time": "2024-08-05T09:46:22.189495",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n",
      "  pid, fd = os.forkpty()\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 0\r\n"
     ]
    }
   ],
   "source": [
    "!ls -tl output"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adc44451",
   "metadata": {
    "papermill": {
     "duration": 0.0068,
     "end_time": "2024-08-05T09:46:23.270397",
     "exception": false,
     "start_time": "2024-08-05T09:46:23.263597",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# DONE! "
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 5386567,
     "sourceId": 8950798,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5388845,
     "sourceId": 8954223,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5394237,
     "sourceId": 8961984,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5393760,
     "sourceId": 9098939,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30747,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 949.509309,
   "end_time": "2024-08-05T09:46:27.020912",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-05T09:30:37.511603",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
